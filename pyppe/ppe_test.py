
import cv2
import numpy as np
from matplotlib import pyplot as plt
import argparse
import sys

WAFER_MARKER_MAP = {
1:(-40.0,140.0),    2:(-20.0,140.0),    3:(0.0,140.0),      4:(20.0,140.0),     5:(40.0,140.0),  
6:(-80.0,120.0),    7:(-60.0,120.0),    8:(-40.0,120.0),    9:(-20.0,120.0),    10:(0.0,120.0),     11:(20.0,120.0),    12:(40.0,120.0),    13:(60.0,120.0),    14:(80.0,120.0),   
15:(-100.0,100.0),  16:(-80.0,100.0),   17:(-60.0,100.0),   18:(-40.0,100.0),   19:(-20.0,100.0),   20:(0.0,100.0),     21:(20.0,100.0),    22:(40.0,100.0),    23:(60.0,100.0),    24:(80.0,100.0),    25:(100.0,100.0),   
26:(-120.0,80.0),   27:(-100.0,80.0),   28:(-80.0,80.0),    29:(-60.0,80.0),    30:(-40.0,80.0),    31:(-20.0,80.0),    32:(0.0,80.0),      33:(20.0,80.0),     34:(40.0,80.0),     35:(60.0,80.0),     36:(80.0,80.0),     37:(100.0,80.0),    38:(120.0,80.0),
39:(-120.0,60.0),   40:(-100.0,60.0),   41:(-80.0,60.0),    42:(-60.0,60.0),    43:(-40.0,60.0),    44:(-20.0,60.0),    45:(0.0,60.0),      46:(20.0,60.0),     47:(40.0,60.0),     48:(60.0,60.0),     49:(80.0,60.0),     50:(100.0,60.0),    51:(120.0,60.0),   
52:(-140.0,40.0),   53:(-120.0,40.0),   54:(-100.0,40.0),   55:(-80.0,40.0),    56:(-60.0,40.0),    57:(-40.0,40.0),    58:(-20.0,40.0),    59:(0.0,40.0),      60:(20.0,40.0),     61:(40.0,40.0),     62:(60.0,40.0),     63:(80.0,40.0),     64:(100.0,40.0),    65:(120.0,40.0),    66:(140.0,40.0),
67:(-140.0,20.0),   68:(-120.0,20.0),   69:(-100.0,20.0),   70:(-80.0,20.0),    71:(-60.0,20.0),    72:(-40.0,20.0),    73:(-20.0,20.0),    74:(0.0,20.0),      75:(20.0,20.0),     76:(40.0,20.0),     77:(60.0,20.0),     78:(80.0,20.0),     79:(100.0,20.0),    80:(120.0,20.0),    81:(140.0,20.0),
82:(-140.0,0.0),    83:(-120.0,0.0),    84:(-100.0,0.0),    85:(-80.0,0.0),     86:(-60.0,0.0),     87:(-40.0,0.0),     88:(-20.0,0.0),     89:(0.0,0.0),       90:(20.0,0.0),      91:(40.0,0.0),      92:(60.0,0.0),      93:(80.0,0.0),      94:(100.0,0.0),     95:(120.0,0.0),     96:(140.0,0.0),
97:(-140.0,-20.0),  98:(-120.0,-20.0),  99:(-100.0,-20.0),  100:(-80.0,-20.0),  101:(-60.0,-20.0),  102:(-40.0,-20.0),  103:(-20.0,-20.0),  104:(0.0,-20.0),    105:(20.0,-20.0),   106:(40.0,-20.0),   107:(60.0,-20.0),   108:(80.0,-20.0),   109:(100.0,-20.0),  110:(120.0,-20.0),  111:(140.0,-20.0),
112:(-140.0,-40.0), 113:(-120.0,-40.0), 114:(-100.0,-40.0), 115:(-80.0,-40.0),  116:(-60.0,-40.0),  117:(-40.0,-40.0),  118:(-20.0,-40.0),  119:(0.0,-40.0),    120:(20.0,-40.0),   121:(40.0,-40.0),   122:(60.0,-40.0),   123:(80.0,-40.0),   124:(100.0,-40.0),  125:(120.0,-40.0),  126:(140.0,-40.0), 
127:(-120.0,-60.0), 128:(-100.0,-60.0), 129:(-80.0,-60.0),  130:(-60.0,-60.0),  131:(-40.0,-60.0),  132:(-20.0,-60.0),  133:(0.0,-60.0),    134:(20.0,-60.0),   135:(40.0,-60.0),   136:(60.0,-60.0),   137:(80.0,-60.0),   138:(100.0,-60.0),  139:(120.0,-60.0),   
140:(-120.0,-80.0), 141:(-100.0,-80.0), 142:(-80.0,-80.0),  143:(-60.0,-80.0),  144:(-40.0,-80.0),  145:(-20.0,-80.0),  146:(0.0,-80.0),    147:(20.0,-80.0),   148:(40.0,-80.0),   149:(60.0,-80.0),   150:(80.0,-80.0),   151:(100.0,-80.0),  152:(120.0,-80.0),
153:(-100.0,-100.0),154:(-80.0,-100.0), 155:(-60.0,-100.0), 156:(-40.0,-100.0), 157:(-20.0,-100.0), 158:(0.0,-100.0),   159:(20.0,-100.0),  160:(40.0,-100.0),  161:(60.0,-100.0),  162:(80.0,-100.0),  163:(100.0,-100.0),
164:(-80.0,-120.0), 165:(-60.0,-120.0), 166:(-40.0,-120.0), 167:(-20.0,-120.0), 168:(0.0,-120.0),   169:(20.0,-120.0), 170:(40.0,-120.0),   171:(60.0,-120.0),  172:(80.0,-120.0),
173:(-40.0,-140.0), 174:(-20.0,-140.0), 175:(0.0,-140.0),   176:(20.0,-140.0),  177:(40.0,-140.0)
}

# intrinsic
mtx = np.matrix([[2104.980135, 0.000000, 685.611350],[0.000000, 2105.382253, 481.061709],[0., 0., 1.]])

#distorsion
dist = np.matrix([[-0.381566, 0.161209, 0.000589, 0.000404, 0.]])

extrinsic = np.matrix([
    [-0.999333, -0.015262, 0.033173, 96.974835],
    [-0.016663,  0.998963,  -0.042373,  126.214323],
    [-0.032492,  -0.042898,  -0.998551,  597.234350],
    [0.000000,  0.000000,  0.000000,  1.000000]
])

CAM_MARKER_OFFSET = [0, -65, -24.19]
CAM_END_OFFSET = [85, 110, -24.19]
ORIGIN_CAM_MARKER_TM = np.matrix([[1,0,0,CAM_MARKER_OFFSET[0]],[0,1,0,CAM_MARKER_OFFSET[1]],[0,0,1,CAM_MARKER_OFFSET[2]],[0,0,0,1]])
ORIGIN_CAM_END_TM = np.matrix([[1,0,0,CAM_END_OFFSET[0]],[0,1,0,CAM_END_OFFSET[1]],[0,0,1,CAM_END_OFFSET[2]],[0,0,0,1]])



if __name__ == "__main__":
    
    #arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('--camid', nargs='?', required=True, help="camera ID (default 0)")
    parser.add_argument('--test', nargs='?', required=False, help="Focus Quality Measurement")
    args = parser.parse_args()
    
    # camera id setting
    _camid = 0 #default cam ID
    if args.camid is None:
        print("camid argument requires. 0 will be used.")
    else:
        _camid = int(args.camid)

    #use camera device
    device = cv2.VideoCapture(_camid, cv2.CAP_V4L2)
    if not (device.isOpened()):
        print("Could not open the camera device ID : ", _camid)
        sys.exit()

    device.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(*"MJPG"))
    device.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
    device.set(cv2.CAP_PROP_FRAME_HEIGHT, 960)
    device.set(cv2.CAP_PROP_AUTO_EXPOSURE, -11)
    device.set(cv2.CAP_PROP_AUTO_WB, 0)
    
    while True:
        success, raw = device.read()
        if success is True:
            cv2.imshow("Camera Raw Image", raw)
            
            key = cv2.waitKey(1)
            if key == 27:
                cv2.destroyAllWindows()
                break

    device.release()